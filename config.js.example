const config = {
    // Bot own user ID
    ownerID: "1234567890123456",

    // Array of bot admin user IDs
    admins: [],

    // Array of bot support user IDs
    support: [],

    defaultSettings: {
        prefix: "!",
        modLogChannel: "mod-log",
        modRole: "Moderator",
        adminRole: "Administrator",
        systemNotice: "false",
        welcomeChannel: "welcome",
        welcomeMessage: "Say hello to {{user}}, everyone! We all need a warm welcome sometimes :D",
        welcomeEnabled: false
    },

    defaults: {
        // Default single-line async awaitMessage function timeout
        awaitMessageTimeout: 30000
    },

    // Current will print "Playing with your ❤" as bot presence
    presence: {
        game: {
            name: "with your ❤",
            type: 0
        },
        status: "online"
    },

    // PERMISSION LEVEL DEFINITIONS.
    permLevels: [
        {
            level: 0,
            name: "User",
            check: () => true
        },
        {
            level: 2,
            name: "Moderator",
            check: (message) => {
                try {
                    const modRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.modRole.toLowerCase());
                    if (modRole && message.member.roles.has(modRole.id)) return true;
                } catch (e) {
                    return false;
                }
            }
        },
        {
            level: 3,
            name: "Administrator",
            check: (message) => {
                try {
                    const adminRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.adminRole.toLowerCase());
                    return (adminRole && message.member.roles.has(adminRole.id));
                } catch (e) {
                    return false;
                }
            }
        },
        {
            level: 4,
            name: "Server Owner",
            check: (message) => message.channel.type === "text" ? (message.guild.ownerID === message.author.id ? true : false) : false
        },
        {
            level: 8,
            name: "Bot Support",
            check: (message) => config.support.includes(message.author.id)
        },
        {
            level: 9,
            name: "Bot Admin",
            check: (message) => config.admins.includes(message.author.id)
        },
        {
            level: 10,
            name: "Bot Owner",
            check: (message) => message.client.config.ownerID === message.author.id
        }
    ]
};

module.exports = config;
